From 6303d2f2c78984446f25e739a7462e3293cf71d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pali=20Roh=C3=A1r?= <pali.rohar@gmail.com>
Date: Sat, 21 Jun 2025 13:37:53 +0200
Subject: [PATCH] crt: Provide emulation of _fstat32i64, _stat32i64 and
 _wstat32i64 functions for 64-bit msvcrt builds
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

All 64-bit CRT libraries except the msvcrt.dll provides native _fstat32i64,
_stat32i64 and _wstat32i64 functions. 64-bit system os msvcrt.dll is an
exception and does not contain these function.

mingw-w64 already contains emulation of these functions for pre-msvcrt40
32-bit builds. Extend this emulation for 64-bit msvcrt.dll builds.

Signed-off-by: Martin Storsjö <martin@martin.st>
(cherry picked from commit 69963970ab35d1744115152639667f10e2bb24e4)
Signed-off-by: Martin Storsjö <martin@martin.st>
---
 mingw-w64-crt/Makefile.am         |  6 ++++++
 mingw-w64-crt/stdio/_fstat32i64.c | 12 ++++++++++--
 mingw-w64-crt/stdio/_stat32i64.c  | 12 ++++++++++--
 mingw-w64-crt/stdio/_wstat32i64.c | 12 ++++++++++--
 4 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/mingw-w64-crt/Makefile.am b/mingw-w64-crt/Makefile.am
index 7562057ca..3ae153417 100644
--- a/mingw-w64-crt/Makefile.am
+++ b/mingw-w64-crt/Makefile.am
@@ -625,8 +625,11 @@ src_msvcrt64=\
   misc/wctob.c \
   stdio/_fseeki64.c \
   stdio/_fstat32.c \
+  stdio/_fstat32i64.c \
   stdio/_stat32.c \
+  stdio/_stat32i64.c \
   stdio/_wstat32.c \
+  stdio/_wstat32i64.c \
   string/wcstok.c
 
 # Files included in libmsvcrt-os.a (for msvcrt.dll) on arm32
@@ -781,9 +784,12 @@ src_msvcrtarm64=\
   misc/__initenv.c \
   misc/__winitenv.c \
   stdio/_fstat32.c \
+  stdio/_fstat32i64.c \
   stdio/_setmaxstdio.c \
   stdio/_stat32.c \
+  stdio/_stat32i64.c \
   stdio/_wstat32.c \
+  stdio/_wstat32i64.c \
   stdio/gets.c
 
 if ARM64EC
diff --git a/mingw-w64-crt/stdio/_fstat32i64.c b/mingw-w64-crt/stdio/_fstat32i64.c
index d10c35577..5d737d5e0 100644
--- a/mingw-w64-crt/stdio/_fstat32i64.c
+++ b/mingw-w64-crt/stdio/_fstat32i64.c
@@ -6,6 +6,7 @@
 
 #include <sys/stat.h>
 #include <stdint.h>
+#include <errno.h>
 
 /* When the file time does not fit into the st_Xtime field:
  *           crtdll-msvcr71   msvcr80+
@@ -13,8 +14,9 @@
  * errno       no change       EINVAL
  * returns         0              0
  *
- * This file is used only for pre-msvcrt40 builds,
- * So use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * This file is used for 32-bit pre-msvcrt40 builds and 64-bit msvcrt.dll builds.
+ * So for 32-bit use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * And for 64-bit use the msvcr80+ behavior - fills -1 with setting errno to EINVAL.
  */
 int __cdecl _fstat32i64(int _FileDes,struct _stat32i64 *_Stat)
 {
@@ -33,10 +35,16 @@ int __cdecl _fstat32i64(int _FileDes,struct _stat32i64 *_Stat)
   _Stat->st_atime=((st.st_atime < 0 || st.st_atime > INT32_MAX) ? -1 : st.st_atime);
   _Stat->st_mtime=((st.st_mtime < 0 || st.st_mtime > INT32_MAX) ? -1 : st.st_mtime);
   _Stat->st_ctime=((st.st_ctime < 0 || st.st_ctime > INT32_MAX) ? -1 : st.st_ctime);
+#ifdef _WIN64
+  if (_Stat->st_atime == -1 || _Stat->st_mtime == -1 || _Stat->st_ctime == -1)
+    errno = EINVAL;
+#endif
   return 0;
 }
 int (__cdecl *__MINGW_IMP_SYMBOL(_fstat32i64))(int, struct _stat32i64 *) = _fstat32i64;
 
+#ifndef _WIN64
 #undef _fstati64
 int __attribute__ ((alias ("_fstat32i64"))) __cdecl _fstati64(int, struct _stat32i64 *);
 extern int __attribute__ ((alias (__MINGW64_STRINGIFY(__MINGW_IMP_SYMBOL(_fstat32i64))))) (__cdecl *__MINGW_IMP_SYMBOL(_fstati64))(int, struct _stat32i64 *);
+#endif
diff --git a/mingw-w64-crt/stdio/_stat32i64.c b/mingw-w64-crt/stdio/_stat32i64.c
index 3d3d2702a..e4a6f964c 100644
--- a/mingw-w64-crt/stdio/_stat32i64.c
+++ b/mingw-w64-crt/stdio/_stat32i64.c
@@ -6,6 +6,7 @@
 
 #include <sys/stat.h>
 #include <stdint.h>
+#include <errno.h>
 
 /* When the file time does not fit into the st_Xtime field:
  *           crtdll-msvcr71   msvcr80+
@@ -13,8 +14,9 @@
  * errno       no change       EINVAL
  * returns         0              0
  *
- * This file is used only for pre-msvcrt40 builds,
- * So use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * This file is used for 32-bit pre-msvcrt40 builds and 64-bit msvcrt.dll builds.
+ * So for 32-bit use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * And for 64-bit use the msvcr80+ behavior - fills -1 with setting errno to EINVAL.
  */
 int __cdecl _stat32i64(const char *_Name,struct _stat32i64 *_Stat)
 {
@@ -33,10 +35,16 @@ int __cdecl _stat32i64(const char *_Name,struct _stat32i64 *_Stat)
   _Stat->st_atime=((st.st_atime < 0 || st.st_atime > INT32_MAX) ? -1 : st.st_atime);
   _Stat->st_mtime=((st.st_mtime < 0 || st.st_mtime > INT32_MAX) ? -1 : st.st_mtime);
   _Stat->st_ctime=((st.st_ctime < 0 || st.st_ctime > INT32_MAX) ? -1 : st.st_ctime);
+#ifdef _WIN64
+  if (_Stat->st_atime == -1 || _Stat->st_mtime == -1 || _Stat->st_ctime == -1)
+    errno = EINVAL;
+#endif
   return 0;
 }
 int (__cdecl *__MINGW_IMP_SYMBOL(_stat32i64))(const char *, struct _stat32i64 *) = _stat32i64;
 
+#ifndef _WIN64
 #undef _stati64
 int __attribute__ ((alias ("_stat32i64"))) __cdecl _stati64(const char *, struct _stat32i64 *);
 extern int __attribute__ ((alias (__MINGW64_STRINGIFY(__MINGW_IMP_SYMBOL(_stat32i64))))) (__cdecl *__MINGW_IMP_SYMBOL(_stati64))(const char *, struct _stat32i64 *);
+#endif
diff --git a/mingw-w64-crt/stdio/_wstat32i64.c b/mingw-w64-crt/stdio/_wstat32i64.c
index b6f2e0b0c..e7eaf0f02 100644
--- a/mingw-w64-crt/stdio/_wstat32i64.c
+++ b/mingw-w64-crt/stdio/_wstat32i64.c
@@ -6,6 +6,7 @@
 
 #include <sys/stat.h>
 #include <stdint.h>
+#include <errno.h>
 
 /* When the file time does not fit into the st_Xtime field:
  *           crtdll-msvcr71   msvcr80+
@@ -13,8 +14,9 @@
  * errno       no change       EINVAL
  * returns         0              0
  *
- * This file is used only for pre-msvcrt40 builds,
- * So use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * This file is used for 32-bit pre-msvcrt40 builds and 64-bit msvcrt.dll builds.
+ * So for 32-bit use the pre-msvcrt40 behavior - fills -1 without errno change.
+ * And for 64-bit use the msvcr80+ behavior - fills -1 with setting errno to EINVAL.
  */
 int __cdecl _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat)
 {
@@ -33,10 +35,16 @@ int __cdecl _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat)
   _Stat->st_atime=((st.st_atime < 0 || st.st_atime > INT32_MAX) ? -1 : st.st_atime);
   _Stat->st_mtime=((st.st_mtime < 0 || st.st_mtime > INT32_MAX) ? -1 : st.st_mtime);
   _Stat->st_ctime=((st.st_ctime < 0 || st.st_ctime > INT32_MAX) ? -1 : st.st_ctime);
+#ifdef _WIN64
+  if (_Stat->st_atime == -1 || _Stat->st_mtime == -1 || _Stat->st_ctime == -1)
+    errno = EINVAL;
+#endif
   return 0;
 }
 int (__cdecl *__MINGW_IMP_SYMBOL(_wstat32i64))(const wchar_t *, struct _stat32i64 *) = _wstat32i64;
 
+#ifndef _WIN64
 #undef _wstati64
 int __attribute__ ((alias ("_wstat32i64"))) __cdecl _wstati64(const wchar_t *, struct _stat32i64 *);
 extern int __attribute__ ((alias (__MINGW64_STRINGIFY(__MINGW_IMP_SYMBOL(_wstat32i64))))) (__cdecl *__MINGW_IMP_SYMBOL(_wstati64))(const wchar_t *, struct _stat32i64 *);
+#endif

